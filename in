#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

clearup ()
{
    set +x
    rm -f /tmp/files.json
    rm -f /config/rclone/rclone.conf
}

trap clearup EXIT INT TERM


exec 3>&1
exec 1>&2

payload="$(cat <&0)"

mkdir -p /config/rclone
cat >/config/rclone/rclone.conf <<ENDLINE
$(jq -r '.source.config' <<< "$payload")
ENDLINE

remote=$(jq -r .source.remote <<< "$payload")

if [ "$(jq -r '.source | has("path")' <<< "$payload")" = 'true' ]; then
    path=$(jq -r '.source.path' <<< "$payload")
    dest="$path/"
else
    path=""
    dest=""
fi

if [ "$(jq -r '.params | has("folder")' <<< "$payload")" = 'true' ]; then
    folder=$(jq -r '.params.folder' <<< "$payload")
    dest+="$folder/"
else
    folder=""
fi

if [ "$(jq -r '.source | has("files")' <<< "$payload")" = 'true' ]; then
    mapfile -t files < <(jq -r '.source.files|.[]' <<< "$payload" | sort)
else
    files=()
fi

if [ "$(jq -r '.params | has("files")' <<< "$payload")" = 'true' ]; then
    mapfile -t params_files < <(jq -r '.params.files|.[]' <<< "$payload" | sort)
else
    params_files=()
fi

if [ "$(jq -r '.params | has("args")' <<< "$payload")" = 'true' ]; then
    mapfile -t args < <(jq -r '.params.args|.[]' <<< "$payload")
elif [ "$(jq -r '.source | has("args")' <<< "$payload")" = 'true' ]; then
    mapfile -t args < <(jq -r '.source.args|.[]' <<< "$payload")
else
    args=()
fi

from=$(jq -r '.params.from' <<< "$payload")
skip=$(jq -r '.params.skip // "false"' <<< "$payload")
debug=$(jq -r '.source.debug // "false"' <<< "$payload")

get_files_json()
{
    if [ -z "${files[*]}" ]; then
        rclone lsjson "$remote:$path" > /tmp/files.json
    else
        data="["
        for file in "${files[@]}"; do
            if [ "$file" != "${files[-1]}" ]; then
                data+="$(rclone lsjson "$remote:$path/$file" | jq -r .[]),"
            else
                data+="$(rclone lsjson "$remote:$path/$file" | jq -r .[])"
            fi
        done
        data+="]"
        echo "$data" > /tmp/files.json
    fi
    if [ "$debug" = "true" ]; then
        jq -C < /tmp/files.json
    fi
}

make_output_json()
{
    digest="sha256:$(jq -S -M < /tmp/files.json | sha256sum | awk '{print $1}')"
    json=$(cat <<ENDLINE
{
    "version": {
        "digest": "$digest",
        "uri": "$remote:$path"
    },
    "metadata": [
ENDLINE
)
    folders=()
    files=()
    while read -r name; do
        isdir=$(jq -r ".[] | select(.Name == \"$name\") | .IsDir" < /tmp/files.json)
        if [ "$isdir" == "true" ]; then
            folders+=("$name")
        else
            files+=("$name")
        fi
    done < <(jq -r '.[] | .Name' < /tmp/files.json)
    IFS=$'\n'
    json+=$(cat <<ENDLINE
        {
            "name": "folder",
            "value": "${folders[*]}"
        },
        {
            "name": "file",
            "value": "${files[*]}"
        },
ENDLINE
)
    if [ "$0" = '/opt/resource/in' ]; then
        json+=$(cat <<ENDLINE
        {
            "name": "download",
            "value": "${params_files[*]}"
        },
ENDLINE
)
    elif [ "$0" = '/opt/resource/out' ]; then
        json+=$(cat <<ENDLINE
        {
            "name": "upload",
            "value": "${params_files[*]}"
        },
ENDLINE
)
    fi
    json+=$(cat <<ENDLINE
        {
            "name": "payload",
            "value": "$size"
        }
    ]
}
ENDLINE
)
    IFS=$'\n\t'
}

case "$0" in
    ('/opt/resource/check')
        get_files_json
        digest="sha256:$(jq -S -M < /tmp/files.json | sha256sum | awk '{print $1}')"
        json="[{\"digest\":\"$digest\",\"uri\": \"$remote:$path\"}]"
        ;;
    ('/opt/resource/in')
        cd "$1" # /tmp/build/get
        if [ "$skip" = "false" ]; then
            if [ -z "${params_files[*]}" ]; then
                if [ -z "${files[*]}" ]; then
                    rclone copy "${args[@]}" "$remote:$dest" .
                else
                    for file in "${files[@]}"; do
                        rclone copy "${args[@]}" "$remote:$dest/$file" .
                    done
                fi
            else
                for file in "${params_files[@]}"; do
                    rclone copy "${args[@]}" "$remote:$dest/$file" .
                done
            fi
        fi
        size=$(du -shc . | awk '{print $1}' | tail -n 1)
        get_files_json
        make_output_json
        if [ "$skip" = "true" ]; then
            cp /tmp/files.json .
        fi
        ;;
    ('/opt/resource/out')
        cd "$1" # /tmp/build/put
        if [ -z "${params_files[*]}" ]; then
            rclone copy "${args[@]}" "$from" "$remote:$dest"
            size=$(du -shc "$from" | awk '{print $1}' | tail -n 1)
        else
            cd "$from"
            for file in "${params_files[@]}"; do
                rclone copy "${args[@]}" "$file" "$remote:$dest"
            done
            size=$(du -shc "${params_files[@]}" | awk '{print $1}' | tail -n 1)
        fi
        get_files_json
        make_output_json
        ;;
esac

jq -n "$json" >&3
